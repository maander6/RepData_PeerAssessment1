y <- strsplit("Heart Attack", " ")
y
base <- "Hsopital.Death.Day..Mortality."
base
z <- paste(base,y[1],y[2], sep=".")
z
y
y <- c(y)
y
y1 < y[[1]]
y1 <- y[[1]]
y1
y1 <- y[1]
y1
str(y)
y <- "Heart Attack"
y
z <- strsplit(y)
z <- strsplit(y, split=" ")
z
x <- paste(z[[1]],z[[2]],sep=".")
unlist(z)
z
x <- paste(z[1],z[2],sep=".")
x
z(1)
z
str(z)
q <- unlist(z)
q
x <- paste(q[1],q[2],sep=".")
x
set.seed(1)
rpois(5,2)
set.seed(10
)
set.seed(10)
x <- rbinom(10,10, 0.5)
e <- rnorm(10,0,20)
y <- 0.5+2*x+e
y
plot(y)
summary(y)
plot(x,y)
?qpois()
set.seed(1)
rpois(5,2)
?rpois
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sec_class, into - c("sex","class"))
separate(res, sec_class, into = c("sex","class"))
separate(res, sex_class, into = c("sex","class"))
submit()
students3
submit()
reset()
?gather
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
select(sat, -contains("total"))
sat2 <- select(sat, -contains("total"))
sat2
gather(sat2, -score_range)
?gather
gather(sat2, part_sex, count)
gather(sat2, part_sex, count, - score_range)
?separate
gather(sat2, part_sex, count)
sat3 <- gather(sat2, part_sex, count)
separate(part_sex, into =c("part","sex"))
separate(part_sex, c("part","sex"))
sat3
separate(part_sex, into = c("part","sex"))
separate(sat3, part_sex, into = c("part","sex"))
submit()
submit()
submit()
submit()
submit()
submit()
bye()
install.packages("knitr")
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
View(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
skip()
submit()
skip()
submit()
skip()
submit()
skip()
library(dplyr)
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
reset)()
reset()
skip()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
0
setwd("E:/RepData_PeerAssessment1")
library(dplyr)
library(ggplot2)
temp <- read.csv("activity.csv")
data <- tbl_df(temp)
data$date <- as.Date(data$date, "%Y-%m-%d")
data$steps <- as.numeric(data$steps)
df <- subset(data, !is.na(data$steps))
df1 <- subset(data, is.na(data$steps))
df1
int.avg <- df %>% group_by(interval) %>% summarize(avg = mean(steps))
View(int.avg)
which(df$interval == int.avg$interval[3])
df$steps[which(df$interval == int.avg$interval[3])] <- int.avg$steps[3]
df$steps[which(df$interval == int.avg$interval[3])] <- int.avg$avg[3]
View(df)
df <- subset(data, !is.na(data$steps))
View(df)
View(df1)
df1$steps[which(df1$interval == int.avg$interval[3])] <- int.avg$avg[3]
View(df1)
source("impute.R")
impute(df1, int.avg)
source("impute.R")
impute(df1, int.avg)
View(df1)
source("impute.R")
impute(df1, int.avg)
View(int.avg)
df2 <- impute(df1, int.avg)
View(df2)
source("impute.R")
df3 <- impute(df1, int.avg)
source("impute.R")
df3 <- impute(df1, int.avg)
View(df3)
View(df)
View(df1)
int.avg <- df %>% group_by(interval) %>% summarize(avg=mean(steps), mdn=median(steps))
View(int.avg)
source("impute.R")
df3 <- impute(df1, int.avg)
View(df3)
View(df1)
View(df2)
View(df1)
round(0.657)
round(1.230)
round(1.532)
int.avg <- df %> group_by(interval) %>% summarize(avg=mean(steps), stddev=sd(steps))
int.avg <- df %>% group_by(interval) %>% summarize(avg=mean(steps), stddev=sd(steps))
View(int.avg)
round(rnorm(1, int.avg$avg[3], int.avg$stddev[3]))
abs(round(rnorm(1, int.avg$avg[3], int.avg$stddev[3])))
abs(round(rnorm(1, int.avg$avg[5], int.avg$stddev[5])))
abs(round(rnorm(1, int.avg$avg[6], int.avg$stddev[6])))
df5 <- imputer(df1, int.avg)
source("impute.R")
df5 <- impute(df1, int.avg)
View(df5)
View(data)
temp <- read.csv("activity.csv")
data <- tbl_df(temp)
data$date <- as.Date(data$date, "%Y-%m-%d")
data$steps <- as.numeric(data$steps)
df <- subset(data, !is.na(data$steps))
avg.step <- df %>% group_by(date) %>% summarize(total=sum(steps))
avg <- mean(avg.step$total)
mdn <- median(avg.step$total)
qplot(avg.step$total, binwidth=1000, fill="red") +
geom_vline(xintercept=avg, color="black") +
xlab("Number of Steps") +
ylab("Frequency")
avg.interval <- df %>% group_by(interval) %>% summarize(avg = mean(steps),
stdev = sd(steps))
qplot(avg.interval$interval, avg.interval$avg, data=avg.interval, geom="line") +
xlab("Daily Interval, minutes") +
ylab("Average Steps")
maxint <- avg.interval$interval[which(avg.interval$avg == max(avg.interval$avg))]
maxint
df.missing <- subset(data, is.na(data$steps))
missing <- nrow(df.missing)
impute <- function(df, df1){
num <- nrow(df1)
for (i in 1:num){
df$steps[which(df$interval == df1$interval[i])] <- abs(round(rnorm(1, df1$avg[i], df1$stdev[i])))
}
df
}
df.replaced <- impute(df.missing, avg.interval)
data1 <- arrange(rbind(df, df.replaced), date, interval)
data1
View(data1)
View(data)
round(rnorn(1, avg.interval$avg[6], avg.interval$sdev[6], lower.tail=FALSE))
round(rnorm(1, avg.interval$avg[6], avg.interval$sdev[6], lower.tail=FALSE))
round(rnorm(1, avg.interval$avg[6], avg.interval$sdev[6]))
round(rnorm(1, avg.interval$avg[6], avg.interval$stdev[6]))
round(rnorm(1, avg.interval$avg[6], avg.interval$stdev[6], lower.tail=FALSE))
if(round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0, 0, round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1])))
if round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0 0 else round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0 0) else (round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1]))))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0, 0) else (round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1]))))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0) 0; else (round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1]))))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1]))))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdv[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1]))<0) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])<0) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])<0)) 0; (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])))
if (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])<0)) 0; else (round(rnorm(1, avg.interval$avg[1], avg.interval$stdev[1])))
source("impute.R")
View(df.missing)
View(df)
test <- impute(df.missing, avg.interval)
View(test)
source("impute.R")
test <- impute(df.missing, avg.interval)
View(test)
View(df.replaced)
View(data1)
?weekdays()
dayofweek <- weekdays(data1$date)
data2 <- cbind(data1, dayofweek)
View(data2)
weekday <- subset(data2, data2$dayofweek != c("Saturday", "Sunday"))
weekend <- subset(data2, data2$dayofweek == c("Saturday", "Sunday"))
View(weekend)
