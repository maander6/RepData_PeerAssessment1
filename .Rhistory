g <- function(y){
y+z
}
x <- 4
x+g(x)
}
z <- 10
f(3)
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x+g(x)
}
f(3)
x <-1:10
if(x>5){x <- 0}
x <- 5
y <- if (x<3) {NO} else{10}
y
cube <- function(x,n){
x~3
}
cube
cube <- function(x,n){
x^3
}
cube(3)
dir
ls
ls()
dir()
cd Rprogramming
cd /Rprogramming
makeVector <- function (x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
cachemean <- function(x, ...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec < makeVector(1:1000)
bigVec <- makeVector(1:1000)
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
cachemean(biggerVec)
dir
library
library()
cachemean(biggerVec)
x <- matrix(rexp(100),10)
x
det(x)
solve(x)
x <- matrix(rexp(10000),100)
x
det(x)
solve(x)
x <- matrix(rexp(100),10)
x
det(x)
solve(x)
solve(x)
list()
ls()
?list
?ls
?list
library(datasets)
data(iris)
apply(iris[,1:4],2,mean)
iris
tapply(iris, iris$species, mean)
nrow (iris)
colnames(iris)
tapply(iris, iris$Species, mean)
apply(iris[,1:4],2, mean)
apply(iris[,1:4],1, mean)
nrow(iris)
y <- subset(iris, Species == "virginica")
nrow(y)
apply(y[,1:4],2,mean)
apply(iris[,1:4],2,mean)
apply(iris,1,mean)
colMeans(iris)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
library(datasets)
data(iris)
tapply(iris, iris$Species, mean)
tapply(iris, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
x <- rnorm(10, 1,1)
x
pnorm(10,1,1)
pnorm(0.5, 1.1)
pnorm(0, 1,1)
pnorm(3,1,1)
?pnorm()
submit()
library("swirl")
ls()
rm(list=ls())
swirl()
5+7
x <-5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
z <- 555
z <- c(z,555)
c(z,555,z)
z2+100
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
(z*2+100)
(z*2+1000)
(z * 2 +100)
(z * 2 +1000)
exit
bue
bye
(z * 2 +1000)
(z*2+1000)
rm(list(ls))
install.packages("RMySQL")
install.packages("httr")
myapp <- oauth_app("github", "939a51dfa11499cc7e3e")
library(httr)
myapp <- oauth_app("github", "939a51dfa11499cc7e3e")
myapp <- oauth_app("github", key="939a51dfa11499cc7e3e", secret="74ce887e07eed175f991c3a7f20d78116617ff30")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key="939a51dfa11499cc7e3e", secret="74ce887e07eed175f991c3a7f20d78116617ff30")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos")
gtoken
github_token
install.packages("httpuv")
install.packages("jsonlite")
library(jsonlite)
library(json)
library(httr)
library(httpuv)
my_app <- oath_app("github", key="939a51dfa11499cc7e3e", secret="74ce887e07eed175f991c3a7f20d78116617ff30"
)
my_app <- oauth_app("github", key="939a51dfa11499cc7e3e", secret="74ce887e07eed175f991c3a7f20d78116617ff30")
github_token <- oauth2.0_token(oauth_endpoints("github"), my app, cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
jsonDATA <- fromJSON("https://api.github.com/users/jtleek/repos")
library(JSONlite)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsondata <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsondata)
jsondata[16]
jsondata[1]
jsondata[5]
names(jsondata)
names(jsondata$5)
names(jsondata$private)
names(jsondata$created_at)
jsondata$created_at
jsondata$id
jsondata$name
q()
library(dplyr)
data <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"))
head(data)
colnames(data)
?which
which(data, ACR=6 & AGS = 6)
data1 <- filter(data, ACR=3 & AGS=6)
data1 <- filter(data, ACR==3 & AGS==6)
head(data1, 5)
View(data)
View(data)
agricultureLogical <- data[data$ACR==3 && data$AGS==6,]
agricultureLogical
View(agricultureLogical)
agricultureLogical <- data[data$ACR=3 && data$AGS=6,]
agricultureLogical <- data[data$ACR=="3" && data$AGS=="6",]
data1 <- as.vector(filter(data, ACR==3 & AGS==6))
str(data1)
which(data1)
data1 <- as.logical(filter(data, ACR==3 & AGS==6))
data1 <- as.logical(as.vector(filter(data, ACR==3 & AGS==6)))
data1 <- subset(data, TYPE==1 & ACR==3 & AGS==6)
data1
View(data1)
View(data1)
View(data1)
which(data1$TYPE==1, data1$ACR==3, data1$AGS==6)
which(data$TYPE==1, data$ACR==3, data$AGS==6)
head(which(data$TYPE==1, data$ACR==3, data$AGS==6))
with(data, data[TYPE == 1 & ACR == 3 & AGS == 6, ])
which(data, data[TYPE == 1 & ACR == 3 & AGS == 6, ])
which(with(data, data[TYPE == 1 & ACR == 3 & AGS == 6, ]))
which(with(data, TYPE == 1 & ACR == 3 & AGS == 6))
data1
data1 <- subset(data, TYPE==1 & ACR==3 & AGS==6)
View(data1)
data1 <- select(data, TYPE==1 & ACR==3 & AGS==6)
View(data1)
data1 <- select(data, TYPE, ACR, AGS)
View(data1)
head(data1, 10)
agricultureLogical <- as.vector(data1, TYPE==1 && ACR==3 && AGS==6)
agricultureLogical <- as.vector(filter(data1, TYPE==1 && ACR==3 && AGS==6))
agricultureLogical <- as.vector(filter(data1, TYPE==1 && ACR==3 && AGS==6), na.rm=TRUE)
agricultureLogical <- filter(data1, TYPE==1 && ACR==3 && AGS==6, na.rm=TRUE)
agricultureLogical <- filter(data1, TYPE==1 && ACR==3 && AGS==6)
agricultureLogical
agricultureLogical <- filter(data1, TYPE==1, ACR==3, AGS==6)
head(agricultureLogical, 10)
which(agricultureLogical)
head(data1)
View(data1)
data$TYPE == 1
data$ACR == 3
agricultureLogical <- which(data$TYPE ==1 && data$ACR ==3 && data$AGS == 6)
agricultureLogical[1:4]
agricultureLogical <- which(data$TYPE ==1 && data$ACR ==3 && data$AGS == 6, na.rm=TRUE)
agricultureLogical <- which(data$TYPE ==1 && data$ACR ==3 && data$AGS == 6)
which(data$TYPE ==1 && data$ACR ==3 && data$AGS == 6)
which(data$TYPE ==1 & data$ACR ==3 & data$AGS == 6)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-530f459165dd520f72965411/973497/asst-3/0ce997f0a4ec11e48b8695abc632c1d8.txt"), header=TRUE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-530f459165dd520f72965411/973497/asst-3/0ce997f0a4ec11e48b8695abc632c1d8.txt"))
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-530f459165dd520f72965411/973497/asst-3/0ce997f0a4ec11e48b8695abc632c1d8.txt"), sep=";")
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-530f459165dd520f72965411/973497/asst-3/0ce997f0a4ec11e48b8695abc632c1d8.txt"), sep=";")
View(data)
data1 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-96d556fa5b6f929e2b0ea8ad/973497/asst-3/84862b20a4ec11e4a95d190a06ff32de.txt"))
View(data1)
data1 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-96d556fa5b6f929e2b0ea8ad/973497/asst-3/84862b20a4ec11e4a95d190a06ff32de.txt"), sep=",")
data1 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-96d556fa5b6f929e2b0ea8ad/973497/asst-3/84862b20a4ec11e4a95d190a06ff32de.txt"), sep=",", header=TRUE)
View(data1)
data1 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-71044156e80065de3384fd06/973497/asst-3/64f391f0a4a911e4a64e03deef317cce.txt"), header=TRUE)
data2 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-71044156e80065de3384fd06/973497/asst-3/64f391f0a4a911e4a64e03deef317cce.txt"), header=TRUE)
View(data2)
data3 <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-a22c0168b34f4ea5c94cfa98/973497/asst-3/fbb94990a4a911e494008734ab201470.txt"), header=TRUE)
View(data3)
View(amzn)
library(dplyr)
library(quantmod)
amzn <- getSymbols("AMZN", auto.assign=FALSE)
View(amzn)
dd <- index(amzn)
dd
class(dd)
dd1 <- grep("^2012.", dd)
dd1
dd1 <- grep("^2012.", dd, values=TRUE)
dd1 <- grep("^2012.", dd, value=TRUE)
dd1
length(dd1)
d2012 <- data.frame(dd1)
d2012
head(d2012)
d2012 <- data.frame(date=dd1)
head(d2012,5)
d2012$day <- weekday(as.Data(d2012$date))
d2012$day <- weekdays(as.Data(d2012$date))
d2012$day <- weekdays(as.Date(d2012$date))
head(d2012)
d2012 <- group_by(d2012, day)
summarize(d2012, count=n())
library(swirl)
ls()
rm(list-ls())
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-07")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy(March 12, 1975)
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
ypdate(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, now())
this_moment
info()
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34, seconds=0)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
url = "https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"
data <- read.table(url(https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt), row.lables=FALSE)
data <- read.table(url(url), row.lables=FALSE)
data <- read.table(url, row.lables=FALSE)
data <- read.table(url, row.lable=FALSE)
data <- read.table(url, row.label=FALSE)
?read.table
data <- read.table(url, row.names=FALSE)
data <- read.table(url, row.names=FALSE)
data <- read.table(url(url), row.names=FALSE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"), row.names=FALSE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"), row.name=FALSE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"))
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"), na.rm=FALSE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"), rm.na=FALSE)
data <- read.table(url("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"), header=TRUE)
data <- read.table(https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt)
data <- read.table("https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt")
data <- read.table(url(url))
url
dt <- "https://s3.amazonaws.com/coursera-uploads/user-378ec1e1454892f0727eaa5d/973497/asst-3/bbfed9e0a1a311e4a196b35c8ca30f9a.txt"
data <- read.table(url(dt))
data <- read.table(url(dt), sep=",")
View(data)
install.packages("fitbitScraper")
login(maander6, knen8175)
library(fitbitScraper)
login(maander6@gmail.com, knen8175)
login("maander6@gmail.com", "knen8175")
cookie <- login(email="maander6<at>gmail.com", pawword="knen8175")
cookie <- login(email="maander6<at>gmail.com", password="knen8175")
get_intraday_data(cookie, what-"steps", date="2015-04-12")
get_intraday_data(cookie, what="steps", date="2015-04-12")
data <- get_intraday_data(cookie, what="steps", date="2015-04-12")
View(data)
data1 <- get_daily_data(cookie, what="steps", start_date="2015-03-18", end_date="2015-04-17")
View(data1)
data1 <- get_daily_data(cookie, what="steps", start_date="2014-03-18", end_date="2015-04-17")
View(data1)
data1 <- get_daily_data(cookie, what="steps", start_date="2013-03-18", end_date="2015-04-17")
View(data1)
data1 <- get_daily_data(cookie, what="steps", start_date="2012-03-18", end_date="2015-04-17")
View(data1)
data1 <- get_daily_data(cookie, what="steps", start_date="2010-03-18", end_date="2015-04-17")
View(data1)
data1 <- get_daily_data(cookie, what="steps", start_date="2009-03-18", end_date="2015-04-17")
View(data1)
get_premium_export(cookie, what="ACTIVITIES", start_date="2015-04-12", end_date="2015-04-17")
get_daily_data(cookie, what="getTimeInHeartRateZonesPerDay", start_date="2015-04-10", end_date="2015-04-17")
get_intraday_data(cookie, what="steps", date="2010-01-20")
data <- get_intraday_data(cookie, what="steps", date="2010-01-20")
View(data)
plot(data$time, data#steps)
)
plot(data$time, data$steps)
barplot(data$time,data$steps)
barplot(data$steps)
View(data1)
data1$dow <- weekdays(as.Date(data1$time, "%Y-%m-%d"))
View(data1)
data2 <- get_daily_data(cookie, what="steps", start_date="2010-01-19", end_date="2015-04-17")
View(data2)
tail(data2)
data2$dow <- weekdays(as.Date(data2$time, "%Y-%m-%d"))
View(data2)
data2 <- filter(data2, steps > 0)
data3 <- as.data.frame(data2)
str(data3)
str(data22)
str(data2)
data3 <- filter(data3, steps>0)
colnames(data3)
data3 <- arrange(data3, steps)
library(dplyr)
data3 <- filter(data3, steps)
data3 <- filter(data3, steps>0)
data4 <- group_by(data3, dow)
summarize(data4, average=mean(steps))
barplot(data4$average, col="red")
barplot(data4$average)
data2$year <- format(data2$time, "%Y")
View(data2)
data3 <- filter(data2, steps>0)
data4 <- summarize(data3, year, dow)
data4 <- group_by(data3, year, dow)
summarize(data3, average_steps=mean(steps))
summarize(data4, average_steps=mean(steps))
setwd("C:/Users/Mark/RepData_PeerAssessment1")
library(dplyr)
library(ggplot2)
temp <- read.csv("activity.csv")
data <- tbl_df(temp)
data$date <- as.Date(data$date, "%Y-%m-%d")
data$steps <- as.numeric(data$steps)
df <- subset(data, !is.na(data$steps))
avg.interval <- df %>% group_by(interval) %>% summarize(avg = mean(steps),
stdev = sd(steps))
df.missing <- subset(data, is.na(data$steps))
missing <- nrow(df.missing)
impute <- function(df, df1){
num <- nrow(df1)
for (i in 1:num){
val <- round(rnorm(1, df1$avg[i], df1$stdev[i]))
if (val < 0){
val <- 0
}
df$steps[which(df$interval == df1$interval[i])] <- val
}
df
}
df.replaced <- impute(df.missing, avg.interval)
data1 <- arrange(rbind(df, df.replaced), date, interval)
data1
avg.step.cor <- data1 %>% group_by(date) %>% summarize(total=sum(steps))
dayofweek <- weekdays(data1$date)
data1 <- cbind(data1, dayofweek)
weekday <- subset(data1, data1$dayofweek != c("Saturday", "Sunday"))
weekend <- subset(data1, data1$dayofweek == c("Saturday", "Sunday"))
View(weekday)
weekday.interval <- weekday %>% group_by(interval) %>% summarize(avg = mean(steps))
weekend.interval <- weekend %>% group_by(interval) %>% summarize(avg = mean(steps))
View(weekday.interval)
p1 <- qplot(weekday.interval, aes(x=interval, y= avg))
p1
str(weekday.interval)
qplot(weekday.interval$interval, weekday.interval$avg, data=weekday.interval, geom="line")
p1 <- qplot(weekday.interval$interval, weekday.interval$avg, data=weekday.interval, geom="line")
qplot(weekend.interval$interval, weekend.interval$avg, data=weekend.interval, geom="line")
p2 <- qplot(weekend.interval$interval, weekend.interval$avg, data=weekend.interval, geom="line")
multiplot(p1, p2, col=1)
library(grid)
install.packages("gridBase")
library(gridBase)
?multiplot
multiplot(p1, p2, col=1)
View(weekday)
View(weekend)
weekday <- subset(data1, data1$dayofweek != c("Saturday", "Sunday"))
weekend <- subset(data1, data1$dayofweek == c("Saturday", "Sunday"))
weekday <- mutate(weekday, DorE="weekday")
View(weekday)
weekend <- mutate(weekend, DorE="weekend")
data2 <- arrange(rbind(weekend, weekday), date, interval)
View(data2)
data3 <- data2 %>% group_by(DorE, interval) %>% summarize(avg = mean(steps))
View(data3)
qplot(data3, aes(x=interval, y=avg), geom="line")
qplot(data3, aes(x=interval, y=avg) +geom_line()
)
qplot(data3, aes(x=interval, y=avg)) +geom_line()
ggplot(data3, aes(x=interval, y=avg)) +geom_line()
ggplot(data3, aes(x=interval, y=avg)) +geom_line() + facet_grid(DorE ~ .)
